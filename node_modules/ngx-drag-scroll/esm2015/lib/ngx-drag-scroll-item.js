import { Directive, ElementRef, Input, HostBinding, Inject } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class DragScrollItemDirective {
    constructor(elementRef) {
        this.display = 'inline-block';
        this._dragDisabled = false;
        this._elementRef = elementRef;
    }
    get dragDisabled() { return this._dragDisabled; }
    set dragDisabled(value) { this._dragDisabled = value; }
}
DragScrollItemDirective.ɵfac = function DragScrollItemDirective_Factory(t) { return new (t || DragScrollItemDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef)); };
DragScrollItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DragScrollItemDirective, selectors: [["", "drag-scroll-item", ""]], hostVars: 2, hostBindings: function DragScrollItemDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("display", ctx.display);
    } }, inputs: { dragDisabled: ["drag-disabled", "dragDisabled"] } });
DragScrollItemDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
DragScrollItemDirective.propDecorators = {
    display: [{ type: HostBinding, args: ['style.display',] }],
    dragDisabled: [{ type: Input, args: ['drag-disabled',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragScrollItemDirective, [{
        type: Directive,
        args: [{
                selector: '[drag-scroll-item]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{
                type: Inject,
                args: [ElementRef]
            }] }]; }, { display: [{
            type: HostBinding,
            args: ['style.display']
        }], dragDisabled: [{
            type: Input,
            args: ['drag-disabled']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRyYWctc2Nyb2xsLWl0ZW0uanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1kcmFnLXNjcm9sbC9zcmMvbGliL25neC1kcmFnLXNjcm9sbC1pdGVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUtsRixNQUFNLE9BQU8sdUJBQXVCO0FBQ3BDLElBV0UsWUFDc0IsVUFBc0I7QUFDNUMsUUFaQSxZQUFPLEdBQUcsY0FBYyxDQUFDO0FBQzNCLFFBS0Usa0JBQWEsR0FBRyxLQUFLLENBQUM7QUFDeEIsUUFNSSxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztBQUNsQyxJQUFFLENBQUM7QUFDSCxJQWJFLElBQ0ksWUFBWSxLQUFLLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDbkQsSUFBRSxJQUFJLFlBQVksQ0FBQyxLQUFjLElBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xFO21EQVZDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsb0JBQW9CLGNBQy9COzs7d0VBQ0k7QUFBQztBQUNVLFlBTkksVUFBVSx1QkFrQnpCLE1BQU0sU0FBQyxVQUFVO0FBQVE7QUFBRztBQUVYLHNCQWRuQixXQUFXLFNBQUMsZUFBZTtBQUN6QiwyQkFFRixLQUFLLFNBQUMsZUFBZTtBQUNwQjs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBIb3N0QmluZGluZywgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tkcmFnLXNjcm9sbC1pdGVtXSdcbn0pXG5leHBvcnQgY2xhc3MgRHJhZ1Njcm9sbEl0ZW1EaXJlY3RpdmUge1xuICBASG9zdEJpbmRpbmcoJ3N0eWxlLmRpc3BsYXknKVxuICBkaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG5cbiAgQElucHV0KCdkcmFnLWRpc2FibGVkJylcbiAgZ2V0IGRyYWdEaXNhYmxlZCgpIHsgcmV0dXJuIHRoaXMuX2RyYWdEaXNhYmxlZDsgfVxuICBzZXQgZHJhZ0Rpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7IHRoaXMuX2RyYWdEaXNhYmxlZCA9IHZhbHVlOyB9XG5cbiAgX2RyYWdEaXNhYmxlZCA9IGZhbHNlO1xuXG4gIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoRWxlbWVudFJlZikgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgKSB7XG4gICAgdGhpcy5fZWxlbWVudFJlZiA9IGVsZW1lbnRSZWY7XG4gIH1cbn1cbiJdfQ==