{"version":3,"file":"ngx-drag-scroll.component.d.ts","sources":["ngx-drag-scroll.component.d.ts"],"names":[],"mappingssourcesContent":["/// <reference types=\"node\" />\nimport { ElementRef, Renderer2, OnDestroy, AfterViewInit, OnChanges, EventEmitter, AfterViewChecked, QueryList } from '@angular/core';\nimport { DragScrollItemDirective } from './ngx-drag-scroll-item';\nexport declare class DragScrollComponent implements OnDestroy, AfterViewInit, OnChanges, AfterViewChecked {\n    private _elementRef;\n    private _renderer;\n    private _document;\n    private _index;\n    private _scrollbarHidden;\n    private _disabled;\n    private _xDisabled;\n    private _xWheelEnabled;\n    private _yDisabled;\n    private _dragDisabled;\n    private _snapDisabled;\n    private _snapOffset;\n    private _snapDuration;\n    private _isDragging;\n    private _onMouseMoveListener;\n    private _onMouseUpListener;\n    private _onMouseDownListener;\n    private _onScrollListener;\n    private _onDragStartListener;\n    /**\n     * Is the user currently pressing the element\n     */\n    isPressed: boolean;\n    /**\n     * Is the user currently scrolling the element\n     */\n    isScrolling: boolean;\n    scrollTimer: number | NodeJS.Timer;\n    scrollToTimer: number | NodeJS.Timer;\n    /**\n     * Is the user currently dragging the element\n     */\n    get isDragging(): boolean;\n    /**\n     * The x coordinates on the element\n     */\n    downX: number;\n    /**\n     * The y coordinates on the element\n     */\n    downY: number;\n    displayType: string | null;\n    elWidth: string | null;\n    elHeight: string | null;\n    /**\n     * The parentNode of carousel Element\n     */\n    parentNode: HTMLElement;\n    /**\n     * The carousel Element\n     */\n    _contentRef: ElementRef;\n    _children: QueryList<DragScrollItemDirective>;\n    _pointerEvents: string;\n    wrapper: HTMLDivElement | null;\n    scrollbarWidth: string | null;\n    get currIndex(): number;\n    set currIndex(value: number);\n    isAnimating: boolean;\n    prevChildrenLength: number;\n    indexBound: number;\n    dsInitialized: EventEmitter<void>;\n    indexChanged: EventEmitter<number>;\n    reachesLeftBound: EventEmitter<boolean>;\n    reachesRightBound: EventEmitter<boolean>;\n    snapAnimationFinished: EventEmitter<number>;\n    dragStart: EventEmitter<void>;\n    dragEnd: EventEmitter<void>;\n    /**\n     * Whether the scrollbar is hidden\n     */\n    get scrollbarHidden(): boolean;\n    set scrollbarHidden(value: boolean);\n    /**\n     * Whether horizontally and vertically draging and scrolling is be disabled\n     */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    /**\n     * Whether horizontally dragging and scrolling is be disabled\n     */\n    get xDisabled(): boolean;\n    set xDisabled(value: boolean);\n    /**\n     * Whether vertically dragging and scrolling events is disabled\n     */\n    get yDisabled(): boolean;\n    set yDisabled(value: boolean);\n    /**\n     * Whether scrolling horizontally with mouse wheel is enabled\n     */\n    get xWheelEnabled(): boolean;\n    set xWheelEnabled(value: boolean);\n    get dragDisabled(): boolean;\n    set dragDisabled(value: boolean);\n    get snapDisabled(): boolean;\n    set snapDisabled(value: boolean);\n    get snapOffset(): number;\n    set snapOffset(value: number);\n    get snapDuration(): number;\n    set snapDuration(value: number);\n    constructor(_elementRef: ElementRef, _renderer: Renderer2, _document: any);\n    ngOnChanges(): void;\n    ngAfterViewInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    onMouseMoveHandler(event: MouseEvent): void;\n    onMouseMove(event: MouseEvent): void;\n    onMouseDownHandler(event: MouseEvent): void;\n    onScrollHandler(): void;\n    onMouseUpHandler(event: MouseEvent): void;\n    moveLeft(): void;\n    moveRight(): void;\n    moveTo(index: number): void;\n    checkNavStatus(): void;\n    onWheel(event: WheelEvent): void;\n    onWindowResize(): void;\n    private _setIsDragging;\n    private _startGlobalListening;\n    private _stopGlobalListening;\n    private disableScroll;\n    private enableScroll;\n    private hideScrollbar;\n    private showScrollbar;\n    private checkScrollbar;\n    private setScrollBar;\n    private getScrollbarWidth;\n    private refreshWrapperDimensions;\n    private scrollTo;\n    private locateCurrentIndex;\n    private currentChildWidth;\n    private toChildrenLocation;\n    private locateDragScrollItem;\n    private markElDimension;\n    private maximumIndex;\n    private isScrollReachesRightEnd;\n    /**\n     * adds a margin right style to the last child element which will resolve the issue\n     * of last item gets cutoff.\n     */\n    private adjustMarginToLastChild;\n}\n"]}